buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url = 'https://maven.parchmentmc.org' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'eclipse'
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

version = mod_version

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'

group = 'com.oitsjustjose.geolosys' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "GeolosysNext-${game_version}-${mod_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    copyIdeResources = true
    runs {
        client {
            workingDirectory project.file('run')
            properties 'mixin.env.disableRefMap': 'true'
            property 'forge.logging.console.level', 'debug'

            mods {
                geolosys {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            properties 'mixin.env.disableRefMap': 'true'
            property 'forge.logging.console.level', 'debug'

            mods {
                geolosys {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', "geolosys", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "geolosys" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${game_version}-${forge_version}"
}

repositories {
    maven { url 'https://maven.blamejared.com' }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
        mod_version: mod_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "geolosys",
                "Specification-Vendor"    : "immails.su / oitsjustjose.com",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "immails.su / oitsjustjose.com",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier = 'Deobf'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'Sources'
    from sourceSets.main.allSource
}

artifacts {
    archives deobfJar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
